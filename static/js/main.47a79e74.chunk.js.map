{"version":3,"sources":["components/ContactElem/ContactElem.module.css","components/ContactFilter/ContactFilter.module.css","components/container/Container.module.css","redux/filter/filter-actions.js","redux/types.js","redux/filter/filter-reducer.js","redux/contacts/contact-actions.js","redux/contacts/contacs-reducer.js","redux/store.js","components/container/Container.js","components/ContactElem/ContactElem.js","components/ContactList/ContactList.js","redux/selector.js","components/ContactForm/ContactForm.js","components/ContactFilter/ContactFilter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsFilter","createAction","filterReducer","createReducer","state","payload","addContact","contactDelete","getContactFromLocaleStorage","contactsReducer","id","name","number","filter","_","persistConfig","key","storage","blacklist","rootReducer","combineReducers","contacts","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","Container","children","className","s","container","ContactElem","onContactDelete","btnItem","type","onClick","connect","dispatch","map","contactItem","getContacts","getFilter","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","reLockInput","props","find","contact","alert","shortid","generate","onAddContact","this","onSubmit","form","roundedInput","pattern","title","placeholder","required","onChange","btnForm","Component","filterInputBox","filterInput","App","getVisibleContacts","normalizedFilter","toLowerCase","includes","visibleContacts","contactFromLS","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.47a79e74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactElem_contactItem__2m2cE\",\"btnItem\":\"ContactElem_btnItem__3oo2u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"ContactFilter_filterInput__ZCB_A\",\"filterInputBox\":\"ContactFilter_filterInputBox__3gqPo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__11hGV\"};","import { createAction } from '@reduxjs/toolkit'\r\nimport { FILTER } from '../../redux/types'\r\n\r\nexport const contactsFilter = createAction(FILTER)\r\n","export const ADD = 'addContact'\r\nexport const DELETE = 'contactDelete'\r\nexport const FILTER = 'contactsFilter'\r\nexport const GET = 'getContacts'\r\n","import { contactsFilter } from '../filter/filter-actions'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\n\r\nconst filter = ''\r\n\r\nconst filterReducer = createReducer(filter, {\r\n  [contactsFilter]: (state, { payload }) => (state = payload),\r\n})\r\n\r\nexport default filterReducer\r\n","import { createAction } from '@reduxjs/toolkit'\r\nimport { ADD, DELETE, GET } from '../../redux/types'\r\nexport const addContact = createAction(ADD)\r\nexport const contactDelete = createAction(DELETE)\r\nexport const getContactFromLocaleStorage = createAction(GET)\r\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addContact,\r\n  contactDelete,\r\n  getContactFromLocaleStorage,\r\n} from './contact-actions'\r\n\r\nconst contacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n]\r\n\r\nconst contactsReducer = createReducer(contacts, {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [contactDelete]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n  [getContactFromLocaleStorage]: (_, { payload }) => payload,\r\n})\r\n\r\nexport default contactsReducer\r\n\r\n// [keyName] : (state, action) => { }\r\n","// import { combineReducers } from 'redux'\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit'\r\nimport filterReducer from '../redux/filter/filter-reducer'\r\nimport contactsReducer from '../redux/contacts/contacs-reducer'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  blacklist: 'filter',\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n})\r\n\r\nexport const persistor = persistStore(store)\r\n\r\n// export default { store, persistor }\r\n","import s from './Container.module.css'\r\n\r\nexport const Container = ({ children }) => (\r\n  <div className={s.container}>{children}</div>\r\n)\r\n","import PropTypes from 'prop-types'\r\nimport s from './ContactElem.module.css'\r\n\r\nexport const ContactElem = ({ name, number, onContactDelete }) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n      <button className={s.btnItem} type=\"button\" onClick={onContactDelete}>\r\n        Delete\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nContactElem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onContactDelete: PropTypes.func.isRequired,\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { ContactElem } from '../ContactElem/ContactElem'\r\nimport s from '../ContactElem/ContactElem.module.css'\r\nimport { contactDelete } from '../../redux/contacts/contact-actions'\r\n\r\nconst ContactList = ({ contacts, onContactDelete }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li className={s.contactItem} key={id}>\r\n            <ContactElem\r\n              name={name}\r\n              number={number}\r\n              onContactDelete={() => {\r\n                onContactDelete(id)\r\n              }}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nContactList.propTypes = {\r\n  onContactDelete: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onContactDelete: (id) => dispatch(contactDelete(id)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactList)\r\n","export const getContacts = (state) => state.contacts\r\nexport const getFilter = (state) => state.filter\r\n","import PropTypes from 'prop-types'\r\nimport s from './ContactForm.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { addContact } from '../../redux/contacts/contact-actions'\r\nimport shortid from 'shortid'\r\nimport { Component } from 'react'\r\nimport { getContacts } from '../../redux/selector'\r\n\r\nexport class ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n  }\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  }\r\n\r\n  /* ------------------------- Записывает имя контакта ------------------------ */\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target\r\n    this.setState({ [name]: value })\r\n  }\r\n  /* -------------- выводит введённые данные по нажатию на кнопку ------------- */\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const { contacts } = this.props\r\n    const reLockInput = contacts.find(\r\n      (contact) => contact.name === this.state.name,\r\n    )\r\n\r\n    if (reLockInput) {\r\n      alert('Такой контакт уже есть в списке')\r\n    } else {\r\n      /* ------------------------ Добавляет контакт в список ----------------------- */\r\n      const contact = {\r\n        ...this.state,\r\n        id: shortid.generate(),\r\n      }\r\n\r\n      this.props.onAddContact(contact)\r\n      this.setState({\r\n        name: '',\r\n        number: '',\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, number } = this.state\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label>\r\n          {/* <p>Name</p> */}\r\n          <input\r\n            className={s.roundedInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            placeholder=\"Name:\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          {/* <p>Number</p> */}\r\n          <input\r\n            className={s.roundedInput}\r\n            type=\"tel\"\r\n            value={number}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            placeholder=\"Tel:\"\r\n            required\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.btnForm}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddContact: (contact) => dispatch(addContact(contact)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm)\r\n","import { connect } from 'react-redux'\r\nimport { contactsFilter } from '../../redux/filter/filter-actions'\r\nimport s from './ContactFilter.module.css'\r\n\r\nconst ContactFilter = ({ onChange }) => (\r\n  <label className={s.filterInputBox}>\r\n    <input\r\n      className={s.filterInput}\r\n      placeholder=\"Find contacts by name\"\r\n      type=\"text\"\r\n      // value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n    />\r\n  </label>\r\n)\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (filter) => dispatch(contactsFilter(filter)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactFilter)\r\n","import { Container } from './components/container/Container'\r\nimport ContactList from './components/ContactList/ContactList'\r\nimport ContactForm from './components/ContactForm/ContactForm'\r\nimport ContactFilter from './components/ContactFilter/ContactFilter'\r\nimport { connect } from 'react-redux'\r\nimport { getContactFromLocaleStorage } from './redux/contacts/contact-actions'\r\nimport { getContacts, getFilter } from './redux/selector'\r\nimport { Component } from 'react'\r\n\r\nclass App extends Component {\r\n  getVisibleContacts = () => {\r\n    const { contacts, filter } = this.props\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const visibleContacts = this.getVisibleContacts()\r\n\r\n    return (\r\n      <Container>\r\n        <h1>Phoneboock</h1>\r\n        <ContactForm />\r\n\r\n        <h2>Contacts</h2>\r\n        <ContactFilter />\r\n        <ContactList contacts={visibleContacts} />\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n  filter: getFilter(state),\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  contactFromLS: (contacts) => dispatch(getContactFromLocaleStorage(contacts)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store, persistor } from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={'Loading...'} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__iwafZ\",\"roundedInput\":\"ContactForm_roundedInput__2M8nQ\",\"btnForm\":\"ContactForm_btnForm__3bR1v\"};"],"sourceRoot":""}